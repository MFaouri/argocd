apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "catalog.name" . }}
  labels:
    app.kubernetes.io/created-by: {{ .Release.Name }}
    app.kubernetes.io/type: app
spec:
  replicas: {{ .Values.catalog.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "catalog.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: service
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.catalog.prometheusPort }}"
        prometheus.io/scrape: "{{ .Values.catalog.prometheusScrape }}"
      labels:
        app.kubernetes.io/name: {{ include "catalog.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "catalog.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.catalog.fsGroup }}
      containers:
        - name: {{ .Values.catalog.containerName }}
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "catalog.dbSecretName" . }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "catalog.dbSecretName" . }}
                  key: password
          envFrom:
            - configMapRef:
                name: {{ include "catalog.configMapName" . }}
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: {{ .Values.catalog.readOnlyRootFilesystem }}
            runAsNonRoot: {{ .Values.catalog.runAsNonRoot }}
            runAsUser: {{ .Values.catalog.runAsUser }}
          image: "{{ .Values.catalog.image.repository }}:{{ .Values.catalog.image.tag }}"
          imagePullPolicy: {{ .Values.catalog.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.catalog.containerPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.catalog.livenessProbePath }}
              port: {{ .Values.catalog.containerPort }}
            initialDelaySeconds: {{ .Values.catalog.livenessProbeInitialDelaySeconds }}
            periodSeconds: {{ .Values.catalog.livenessProbePeriodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.catalog.readinessProbePath }}
              port: {{ .Values.catalog.containerPort }}
            successThreshold: {{ .Values.catalog.readinessProbeSuccessThreshold }}
            periodSeconds: {{ .Values.catalog.readinessProbePeriodSeconds }}
          resources:
            limits:
              memory: {{ .Values.catalog.resources.limits.memory }}
            requests:
              cpu: {{ .Values.catalog.resources.requests.cpu }}
              memory: {{ .Values.catalog.resources.requests.memory }}
          volumeMounts:
            - mountPath: {{ .Values.catalog.volumeMountPath }}
              name: {{ .Values.catalog.volumeMountName }}
      volumes:
        - name: {{ .Values.catalog.volumeMountName }}
          emptyDir:
            medium: {{ .Values.catalog.volumeMedium }}
